{
  "openapi": "3.0.1",
  "info": {
    "title": "API",
    "version": "1.0"
  },
  "paths": {
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contacts.",
        "description": "Sample request:\r\n            \r\n    GET /contacts",
        "operationId": "GetContacts",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the contacts",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create a contact.",
        "description": "Sample request:\r\n            \r\n    POST /contacts",
        "operationId": "CreateContact",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The contact has been accepted and will be created shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get a contact.",
        "description": "Sample request:\r\n            \r\n    GET /contacts/{id}",
        "operationId": "GetContactById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the contact",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates a contact.",
        "description": "Sample request:\r\n            \r\n    PUT /contacts/id",
        "operationId": "UpdateContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The contact has been accepted and will be updated shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{contactId}/tags": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get a contact's tags.",
        "description": "Sample request:\r\n            \r\n    GET /contacts/{id}/tags",
        "operationId": "GetContactTags",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the contact",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Gets a list of files on a matter",
        "description": "GET /matters/{matterId}/files",
        "operationId": "GetFiles",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of files on a matter",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FilePagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilePagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilePagedCollection"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Adds a file to a matter",
        "operationId": "AddFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddFileDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddFileDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddFileDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddFileDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Returns the file location and upload url",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files/{fileId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Gets a file",
        "description": "GET /matters/{matterId}/files/{fileId}",
        "operationId": "GetFileById",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Update a file's metadata or upload a new version of the file",
        "operationId": "UpdateFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EditFileDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditFileDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditFileDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EditFileDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Returns the file location and upload url",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files/{fileId}/download": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Gets the download url for a file",
        "operationId": "DownloadFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file download metadata",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadFileInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadFileInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadFileInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/files/{fileId}/upload": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Gets the upload url for a file",
        "operationId": "UploadFile",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file upload url",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/folders": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Gets the root folder of a matter and a list of sub folders and files",
        "operationId": "GetFolders",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the sub folders and files in the root folder",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Creates a folder",
        "operationId": "CreateRootFolder",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The folder has been accepted and will be created shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/documents/folders/{folderId}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Gets a folder and a list of sub folders and files",
        "operationId": "GetFolderById",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the sub folders and files in the folder",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderListingPagedCollection"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Folders"
        ],
        "summary": "Update a folder",
        "operationId": "UpdateFolder",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns the folder location",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Folder not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/firm": {
      "get": {
        "tags": [
          "Firm"
        ],
        "summary": "Get firm.",
        "description": "Sample request:\r\n            \r\n    GET /firm",
        "operationId": "GetFirm",
        "responses": {
          "200": {
            "description": "Returns the firm",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Firm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Firm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Firm"
                }
              }
            }
          },
          "404": {
            "description": "If the firm doesn't exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Firm"
        ],
        "summary": "Update firm.",
        "description": "Sample request:\r\n            \r\n    PUT /firm\r\n    {\r\n       \"Name\": \"Brown LLC\",\r\n       \"Phone\": {\r\n            \"AreaCode\": \"555\",\r\n            \"Number\": \"1234567\"\r\n        }\r\n    }",
        "operationId": "UpdateFirm",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns the firm id and location",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "If the firm doesn't exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/staff": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Get staff in a firm.",
        "description": "Sample request:\r\n            \r\n    GET /staff",
        "operationId": "GetStaff",
        "responses": {
          "200": {
            "description": "Returns a list of all staff",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Staff"
        ],
        "summary": "Create a staff member.",
        "description": "Sample request:\r\n            \r\n    POST /staff",
        "operationId": "CreateStaff",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The staff member has been accepted and will be created shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/staff/{id}": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Get a staff member.",
        "description": "Sample request:\r\n            \r\n    GET /staff/{id}",
        "operationId": "GetStaffById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the staff member",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Staff"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Staff"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Staff"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the firm doesn't exist",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Staff"
        ],
        "summary": "Updates a staff member.",
        "description": "Sample request:\r\n            \r\n    PUT /staff/{id}",
        "operationId": "UpdateStaff",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The staff member has been accepted and will be updated shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "Staff member not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/matteritems": {
      "get": {
        "tags": [
          "MatterItems"
        ],
        "summary": "Get items on a matter.",
        "description": "Sample request:\r\n            \r\n    GET /matters/{matterId}/items",
        "operationId": "GetMatterItems",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the matter items",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItems"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItems"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItems"
                }
              }
            }
          },
          "404": {
            "description": "Matter not found"
          }
        }
      }
    },
    "/matters/{matterId}/matteritems/{id}": {
      "get": {
        "tags": [
          "MatterItems"
        ],
        "summary": "Get an item on a matter.",
        "description": "Sample request:\r\n            \r\n    GET /matters/{matterId}/items/{id}",
        "operationId": "GetMatterItem",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the item",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterItem"
                }
              }
            }
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "/matters": {
      "get": {
        "tags": [
          "Matters"
        ],
        "summary": "Get matters.",
        "description": "Sample request:\r\n            \r\n    GET /matters",
        "operationId": "GetMatters",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "MatterTypeId",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "LastUpdated",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the matters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatterPagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Matters"
        ],
        "summary": "Create a matter.",
        "description": "Sample request:\r\n            \r\n    POST /matters",
        "operationId": "CreateMatter",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The matter has been accepted and will be created shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{id}": {
      "get": {
        "tags": [
          "Matters"
        ],
        "summary": "Get a matter.",
        "description": "Sample request:\r\n            \r\n    GET /matters/{id}",
        "operationId": "GetMatterById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the matter",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Matter"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Matter"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Matter"
                }
              }
            }
          },
          "404": {
            "description": "Matter not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Matters"
        ],
        "summary": "Updates a matter.",
        "description": "Sample request:\r\n            \r\n    PUT /matters/id",
        "operationId": "UpdateMatter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatterDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The matter has been accepted and will be updated shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Matter not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Matters"
        ],
        "summary": "Deletes a matter.",
        "description": "Sample request:\r\n            \r\n    DELETE /matters/id",
        "operationId": "DeleteMatter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The matter has been accepted and will be deleted shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Matter not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/matters/{matterId}/roles/{roleId}/relationships": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Get relationships on a matter.",
        "description": "Sample request:\r\n            \r\n    GET /matters/{matterId}/roles/{roleId}",
        "operationId": "GetRelationshipsOnRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the relationships",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatterRelationships"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterRelationships"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterRelationships"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "Add another relationship to role.",
        "description": "Sample request:\r\n            \r\n    POST /matters/{matterId}/roles/{roleId}/relationships",
        "operationId": "AddAnotherRelationshipToRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The relationship has been accepted and will be created shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/matters/{matterId}/roles/{roleId}/relationships/{id}": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Get a relationship on a role.",
        "description": "Sample request:\r\n            \r\n    GET /matters/{matterId}/roles/{roleId}/relationships/{id}",
        "operationId": "GetRelationshipOnRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the relationship",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Relationship"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relationship"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relationship"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Relationships"
        ],
        "summary": "Updates a relationship on a matter",
        "description": "Sample request:\r\n            \r\n    PUT /matters/{matterId}/roles/{id}/relationships/{id}",
        "operationId": "UpdateRelationship",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The relationship has been accepted and will be updated shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/matters/{matterId}/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get roles on a matter.",
        "description": "Sample request:\r\n            \r\n    GET /matters/{matterId}/roles",
        "operationId": "GetRolesOnMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the roles",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatterRoles"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterRoles"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterRoles"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Add another role to matter.",
        "description": "Sample request:\r\n            \r\n    POST /matters/{matterId}/roles",
        "operationId": "AddAnotherRoleToMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The role has been accepted and will be created shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/matters/{matterId}/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get a role on a matter.",
        "description": "Sample request:\r\n            \r\n    GET /matters/{matterId}/roles/{id}",
        "operationId": "GetRoleOnMatter",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the role",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update role on matter",
        "description": "Sample request:\r\n            \r\n    PUT /matters/{matterId}/roles/{id}",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "name": "matterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The role has been accepted and will be updated shortly",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/mattertypes": {
      "get": {
        "tags": [
          "MatterTypes"
        ],
        "summary": "Get matter types.",
        "description": "Sample request:\r\n            \r\n    GET /mattertypes",
        "operationId": "GetMatterTypes",
        "parameters": [
          {
            "name": "Offset",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "Location",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "Category",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "Deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the matter types",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatterTypePagedCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterTypePagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterTypePagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/mattertypes/{id}": {
      "get": {
        "tags": [
          "MatterTypes"
        ],
        "summary": "Get a matter type.",
        "description": "Sample request:\r\n            \r\n    GET /mattertypes/{id}",
        "operationId": "GetMatterTypeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the matter type",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatterType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatterType"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id parameter",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Matter type not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Link": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Address": {
        "type": "object",
        "properties": {
          "buildingLevel": {
            "type": "string",
            "nullable": true
          },
          "unitNumber": {
            "type": "string",
            "nullable": true
          },
          "unitType": {
            "type": "string",
            "nullable": true
          },
          "streetNumber": {
            "type": "string",
            "nullable": true
          },
          "streetName": {
            "type": "string",
            "nullable": true
          },
          "streetType": {
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          },
          "county": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Person": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "residentialAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "cell": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Company": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "businessAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "staff": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GroupOfPeople": {
        "type": "object",
        "properties": {
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "residentialAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "additionalProperties": false
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "externalSystemId": {
            "type": "string",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "groupOfPeople": {
            "$ref": "#/components/schemas/GroupOfPeople"
          },
          "tags": {
            "$ref": "#/components/schemas/Link"
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactPagedCollection": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "buildingLevel": {
            "type": "string",
            "nullable": true
          },
          "unitNumber": {
            "type": "string",
            "nullable": true
          },
          "unitType": {
            "type": "string",
            "nullable": true
          },
          "streetNumber": {
            "type": "string",
            "nullable": true
          },
          "streetName": {
            "type": "string",
            "nullable": true
          },
          "streetType": {
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          },
          "county": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberDto": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "residentialAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "cell": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "contactPersonId": {
            "type": "string",
            "nullable": true
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "businessAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "staffIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GroupOfPeopleDto": {
        "type": "object",
        "properties": {
          "peopleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "residentialAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          }
        },
        "additionalProperties": false
      },
      "ContactDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "externalSystemId": {
            "type": "string",
            "nullable": true
          },
          "person": {
            "$ref": "#/components/schemas/PersonDto"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyDto"
          },
          "groupOfPeople": {
            "$ref": "#/components/schemas/GroupOfPeopleDto"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "folder": {
            "$ref": "#/components/schemas/Link"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "fileExtension": {
            "type": "string",
            "nullable": true
          },
          "ownerId": {
            "type": "string",
            "nullable": true
          },
          "to": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "sizeBytes": {
            "type": "integer",
            "format": "int64"
          },
          "downloadInfo": {
            "$ref": "#/components/schemas/Link"
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FilePagedCollection": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddFileDto": {
        "required": [
          "fileName"
        ],
        "type": "object",
        "properties": {
          "fileName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Full name of the file including the file extension",
            "example": "court filing.pdf"
          },
          "folderId": {
            "type": "string",
            "description": "Id of the folder to add the file to. If null it will be placed in the root folder",
            "nullable": true
          },
          "dateCreated": {
            "type": "string",
            "description": "The original datetime that the file was created. If null the current datetime will be used",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UploadFileInfo": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "nullable": true
          },
          "uploadUrl": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EditFileDto": {
        "required": [
          "fileName"
        ],
        "type": "object",
        "properties": {
          "fileName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Full name of the file including the file extension",
            "example": "court filing.pdf"
          },
          "folderId": {
            "type": "string",
            "description": "Id of the folder to add the file to. If null it will be placed in the root folder",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DownloadFileInfo": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "nullable": true
          },
          "downloadUrl": {
            "type": "string",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "format": "date-time"
          },
          "sizeBytes": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "Folder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FolderListing": {
        "type": "object",
        "properties": {
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Folder"
            },
            "nullable": true,
            "readOnly": true
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "nullable": true,
            "readOnly": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FolderListingPagedCollection": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolderListing"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FolderDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 256,
            "type": "string"
          },
          "parentFolderId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Firm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "streetAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FirmDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "streetAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "mailingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "fax": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          }
        },
        "additionalProperties": false
      },
      "Staff": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "initials": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "cell": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "former": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StaffPagedCollection": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Staff"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StaffDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "initials": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "cell": {
            "$ref": "#/components/schemas/PhoneNumberDto"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "former": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "visible": {
            "type": "boolean"
          },
          "subItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatterItem"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterItems": {
        "type": "object",
        "properties": {
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatterItem"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Matter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "Id of this matter in an external system",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "Matter number",
            "nullable": true
          },
          "matterType": {
            "$ref": "#/components/schemas/Link"
          },
          "clients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "otherSides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "personResponsible": {
            "$ref": "#/components/schemas/Link"
          },
          "items": {
            "$ref": "#/components/schemas/Link"
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterPagedCollection": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Matter"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "externalSystemId": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "matterTypeId": {
            "type": "string",
            "nullable": true
          },
          "clientIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "clientRole": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "dateOpened": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "personResponsibleStaffId": {
            "type": "string",
            "nullable": true
          },
          "personAssistingStaffId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Relationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "contact": {
            "$ref": "#/components/schemas/Link"
          },
          "representatives": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterRelationships": {
        "type": "object",
        "properties": {
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelationshipDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactId": {
            "type": "string",
            "nullable": true
          },
          "representativeIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "contact": {
            "$ref": "#/components/schemas/Link"
          },
          "representatives": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterRoles": {
        "type": "object",
        "properties": {
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "contactId": {
            "type": "string",
            "nullable": true
          },
          "representativeIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "versionId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "representativeOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "deleted": {
            "type": "boolean"
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatterTypePagedCollection": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          },
          "last": {
            "$ref": "#/components/schemas/Link"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatterType"
            },
            "nullable": true
          },
          "self": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "relation": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "default": "GET",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      },
      "token": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "x-amazon-apigateway-authtype": "cognito_user_pools"
      }
    }
  },
  "servers": [
    {
      "url": "https://stagingapi.smokeball.com",
      "description": "Staging API"
    }
  ],
  "security": [
    {
      "api-key": [],
      "token": []
    }
  ]
}